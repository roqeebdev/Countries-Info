{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n/**\n * A list of values that can be hardware-accelerated.\n */\n\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  let {\n    keyframes,\n    duration = 300,\n    ease\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({ ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n\n    let t = 0;\n\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  const animation = animateStyle(value.owner.current, valueName, keyframes, { ...options,\n    duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  });\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(() => animation.cancel());\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  return {\n    get currentTime() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n\n    set currentTime(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n\n    stop: () => {\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      const {\n        currentTime\n      } = animation;\n\n      if (currentTime) {\n        const sampleAnimation = animateValue({ ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n\n      sync.update(() => animation.cancel());\n    }\n  };\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","onUpdate","onComplete","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","duration","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","onfinish","set","update","cancel","currentTime","newTime","stop","autoplay","setWithVelocity"],"sources":["/Users/macbook/Downloads/country_details/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set currentTime(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}